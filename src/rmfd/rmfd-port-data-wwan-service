#!/bin/bash
# NOTE: we DO REQUIRE bash; don't attempt to set sh or some other thing

# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, version 3.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, write to the Free Software Foundation, Inc., 51
# Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Copyright (C) 2013-2016 Safran Passenger Innovations
#
# Author: Aleksander Morgado <aleksander@aleksander.es>
#

PROGRAM=$0

echoerr() { echo "[$PROGRAM] $@" 1>&2; }
echodbg() { echo "[$PROGRAM] $@"; }

print_usage ()
{
    echodbg "usage: $0 [DEVICE] start-dynamic"
    echodbg "usage: $0 [DEVICE] start-static [IPv4] [Netmask] [Gateway] [DNS1] [DNS2] [MTU]"
    echodbg "usage: $0 [DEVICE] stop"
}

if [ $# -lt 2 ]; then
    echoerr "error: missing arguments" 1>&2
    print_usage
    exit 1
fi

DEVICE=$1
COMMAND=$2
PID_FILE=/var/run/rmfd-port-data-wwan-service-${DEVICE}.pid
LEASES_FILE=/var/run/rmfd-port-data-wwan-service-${DEVICE}.leases
RESOLV_CONF_BACKUP=/var/run/rmfd-port-data-wwan-service-${DEVICE}.resolv.conf.backup

# Check if dhclient is available...
DHCLIENT_PATH="$(which dhclient 2>/dev/null)"
if [ $? -ne 0 ]; then
    echoerr "error: dhclient not available"
    exit 127
fi

# Check if iproute2 is available...
IP_PATH="$(which ip 2>/dev/null)"
if [ $? -ne 0 ]; then
    echoerr "error: iproute2 tools not available"
    exit 127
fi

mask2cdr ()
{
   # Assumes there's no "255." after a non-255 byte in the mask
   local x=${1##*255.}
   set -- 0^^^128^192^224^240^248^252^254^ $(( (${#1} - ${#x})*2 )) ${x%%.*}
   x=${1%%$3*}
   echo $(( $2 + (${#x}/4) ))
}

ip2int ()
{
    local a b c d
    { IFS=. read a b c d; } <<< $1
    echo $(((((((a << 8) | b) << 8) | c) << 8) | d))
}

int2ip ()
{
    local ui32=$1; shift
    local ip n
    for n in 1 2 3 4; do
        ip=$((ui32 & 0xff))${ip:+.}$ip
        ui32=$((ui32 >> 8))
    done
    echo $ip
}

broadcast ()
{
    local addr=$(ip2int $1); shift
    local mask=$((0xffffffff << (32 -$1))); shift
    int2ip $((addr | ~mask))
}

start_network_static ()
{
    echodbg "bringing up WWAN interface '${DEVICE}'"
    ${IP_PATH} link set ${DEVICE} up >/dev/null 2>&1
    IFUP_STATUS=$?
    if [ ${IFUP_STATUS} -ne 0 ]; then
       echoerr "error: couldn't bring up WWAN interface '${DEVICE}': UP command returned ${IFUP_STATUS}"
       stop_network 2
    fi

    if [ -f "${RESOLV_CONF_BACKUP}" ]; then
        rm -f ${RESOLV_CONF_BACKUP}
    fi

    echodbg "backing up resolv.conf file"
    cp /etc/resolv.conf ${RESOLV_CONF_BACKUP}

    if [ -z "${IP_ADDRESS}" ]; then
        echoerr "error: IP address not given"
        stop_network 3
    fi

    if [ -z "${NETMASK_ADDRESS}" ]; then
        echoerr "error: netmask address not given"
        stop_network 4
    fi

    CDR="$(mask2cdr $NETMASK_ADDRESS)"
    if [ -z "${CDR}" ]; then
        echoerr "error: netmask address not converted to cdr"
        stop_network 5
    fi

    BROADCAST="$(broadcast ${IP_ADDRESS} ${CDR})"
    if [ -z "${BROADCAST}" ]; then
        echoerr "error: broadcast address not computed"
        stop_network 6
    fi

    IPADDR_CMD="${IP_PATH} addr add ${IP_ADDRESS}/${CDR} broadcast ${BROADCAST} dev ${DEVICE}"
    echodbg "setting IP address in WWAN interface '${DEVICE}': ${IPADDR_CMD}"
    eval ${IPADDR_CMD} >/dev/null 2>&1
    IPADDR_STATUS=$?
    if [ $IPADDR_STATUS -ne 0 ]; then
        echoerr "error: couldn't set IP address in interface: ${IPADDR_STATUS}"
        stop_network 7
    fi

    if [ -n "${GATEWAY_ADDRESS}" ]; then
        # First try: metric 0
        IPROUTE_CMD="${IP_PATH} route add default via ${GATEWAY_ADDRESS} dev ${DEVICE}"
        echodbg "setting default route with metric 0: ${IPROUTE_CMD}"
        eval ${IPROUTE_CMD} >/dev/null 2>&1
        IPROUTE_STATUS=$?
        if [ $IPROUTE_STATUS -ne 0 ]; then
            # Second try: metric 123
            IPROUTE_CMD="${IP_PATH} route add default via ${GATEWAY_ADDRESS} dev ${DEVICE} metric 123"
            echodbg "setting default route with metric 123: ${IPROUTE_CMD}"
            eval ${IPROUTE_CMD} >/dev/null 2>&1
            IPROUTE_STATUS=$?
            if [ $IPROUTE_STATUS -ne 0 ]; then
                echoerr "error: couldn't set default route in interface: $IPROUTE_STATUS"
                stop_network 8
            fi
        fi
    fi

    if [ -n "${DNS1_ADDRESS}" ] || [ -n "${DNS2_ADDRESS}" ]; then
        echo "" > /etc/resolv.conf
        if [ $? -eq 0 ]; then
            if [ -n "${DNS1_ADDRESS}" ]; then
                echodbg "adding primary DNS address: ${DNS1_ADDRESS}"
                echo "nameserver ${DNS1_ADDRESS}" >> /etc/resolv.conf
            fi
            if [ -n "${DNS2_ADDRESS}" ]; then
                echodbg "adding secondary DNS address: ${DNS2_ADDRESS}"
                echo "nameserver ${DNS2_ADDRESS}" >> /etc/resolv.conf
            fi
        fi
    fi

    if [ -n "${MTU}" ]; then
        IPLINK_CMD="${IP_PATH} link set dev ${DEVICE} mtu ${MTU}"
        echodbg "setting device MTU: ${IPLINK_CMD}"
        eval ${IPLINK_CMD} > /dev/null 2>&1
        IPLINK_STATUS=$?
        if [ "${IPLINK_STATUS}" -ne 0 ]; then
            echoerr "error: couldn't set mtu in interface: ${IPLINK_STATUS}"
        fi
    fi

    echodbg "WWAN interface '${DEVICE}' started successfully"
    exit 0
}

start_network_dynamic ()
{
    echodbg "bringing up WWAN interface '${DEVICE}'"
    ${IP_PATH} link set ${DEVICE} up >/dev/null 2>&1
    IFUP_STATUS=$?
    if [ ${IFUP_STATUS} -ne 0 ]; then
       echoerr "error: couldn't bring up WWAN interface '${DEVICE}': UP command returned ${IFUP_STATUS}"
       stop_network 2
    fi

    if [ -f ${RESOLV_CONF_BACKUP} ]; then
        rm -f ${RESOLV_CONF_BACKUP}
    fi

    echodbg "backing up resolv.conf file"
    cp /etc/resolv.conf ${RESOLV_CONF_BACKUP}

    DHCLIENT_CMD="${DHCLIENT_PATH} -pf ${PID_FILE} -lf ${LEASES_FILE} ${DEVICE}"
    echodbg "requesting DHCP in WWAN interface '${DEVICE}': $DHCLIENT_CMD"
    eval ${DHCLIENT_CMD} >/dev/null 2>&1
    DHCLIENT_STATUS=$?
    if [ ${DHCLIENT_STATUS} -ne 0 ]; then
        echoerr "error: couldn't request DHCP in WWAN interface '${DEVICE}': dhclient returned ${DHCLIENT_STATUS}"
        stop_network 3
    fi

    echodbg "validating IP address in WWAN interface '${DEVICE}'..."
    IPCHECK_RESULT="$(${IP_PATH} addr show dev ${DEVICE} | grep inet | grep -v inet6 | wc -l)"
    if [ -z "$IPCHECK_RESULT" ] || [ "$IPCHECK_RESULT" -lt 1 ]; then
        echoerr "error: IP address not set in WWAN interface '${DEVICE}'"
        stop_network 4
    fi

    echodbg "WWAN interface '${DEVICE}' started successfully"
    exit 0
}

stop_network ()
{
    ERR=$1

    if [ ${ERR} -ne 0 ]; then
        echodbg "Bringing down WWAN interface '${DEVICE}' after failed connection attempt..."
    fi

    # Don't kill dhclient if PID file not around
    if [ -f ${PID_FILE} ]; then
        DHCLIENT_CMD="$DHCLIENT_PATH -x -pf ${PID_FILE} -lf ${LEASES_FILE} ${DEVICE}"
        echodbg "releasing DHCP in WWAN interface '${DEVICE}': ${DHCLIENT_CMD}"
        eval ${DHCLIENT_CMD} >/dev/null 2>&1
        DHCLIENT_STATUS=$?
        if [ ${DHCLIENT_STATUS} -ne 0 ]; then
           echoerr "error: couldn't release DHCP in WWAN interface '${DEVICE}': dhclient returned ${DHCLIENT_STATUS}"
           ERR=5
        fi
    fi

    # Don't bring down interface if not available
    if [ "$(grep ${DEVICE} /proc/net/dev | wc -l)" -ne 0 ]; then
        echodbg "bringing down WWAN interface '${DEVICE}'"
        ${IP_PATH} route flush dev ${DEVICE} >/dev/null 2>&1
        ${IP_PATH} addr flush dev ${DEVICE} >/dev/null 2>&1
        ${IP_PATH} link set ${DEVICE} down >/dev/null 2>&1
        IFDOWN_STATUS=$?
        if [ ${IFDOWN_STATUS} -ne 0 ]; then
           echoerr "error: couldn't bring down WWAN interface '${DEVICE}': DOWN command returned ${IFDOWN_STATUS}"
           ERR=6
        fi
    fi

    if [ ${ERR} -eq 0 ]; then
        echodbg "WWAN interface '${DEVICE}' stopped successfully"
        if [ -f ${RESOLV_CONF_BACKUP} ]; then
            echodbg "restoring resolv.conf file"
            cat ${RESOLV_CONF_BACKUP} > /etc/resolv.conf
            rm ${RESOLV_CONF_BACKUP}
        fi
    fi

    exit ${ERR}
}

# Process commands
case "${COMMAND}" in
    "start-dynamic")
        start_network_dynamic
        ;;
    "start-static")
        IP_ADDRESS=$3
        if [ "${IP_ADDRESS}" == "-" ]; then
            IP_ADDRESS=""
        fi
        NETMASK_ADDRESS=$4
        if [ "${NETMASK_ADDRESS}" == "-" ]; then
            NETMASK_ADDRESS=""
        fi
        GATEWAY_ADDRESS=$5
        if [ "${GATEWAY_ADDRESS}" == "-" ]; then
            GATEWAY_ADDRESS=""
        fi
        DNS1_ADDRESS=$6
        if [ "${DNS1_ADDRESS}" == "-" ]; then
            DNS1_ADDRESS=""
        fi
        DNS2_ADDRESS=$7
        if [ "${DNS2_ADDRESS}" == "-" ]; then
            DNS2_ADDRESS=""
        fi
        MTU=$8
        if [ "${MTU}" == "-" ]; then
            MTU=""
        fi
        start_network_static
        ;;
    "stop")
        stop_network 0
        ;;
    *)
        echoerr "error: unexpected command '$COMMAND'" 1>&2
        print_usage
        exit 1
        ;;
esac

# Never reached
exit 100
