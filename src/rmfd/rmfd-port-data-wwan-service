#!/bin/sh

# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, version 3.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, write to the Free Software Foundation, Inc., 51
# Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Copyright (C) 2013 Zodiac Inflight Innovations
#
# Author: Aleksander Morgado <aleksander@lanedo.com>
#

PROGRAM=$0

echoerr() { echo "[$PROGRAM] $@" 1>&2; }
echodbg() { echo "[$PROGRAM] $@"; }

print_usage ()
{
    echodbg "usage: $0 [DEVICE] [start|stop]"
}

if [ $# -ne 2 ]; then
    echoerr "error: missing arguments" 1>&2
    print_usage
    exit 1
fi

DEVICE=$1
COMMAND=$2
PID_FILE=/var/run/rmfd-port-data-wwan-service-$DEVICE.pid
LEASES_FILE=/var/run/rmfd-port-data-wwan-service-$DEVICE.leases
RESOLV_CONF_BACKUP=/var/run/rmfd-port-data-wwan-service-$DEVICE.resolv.conf.backup
DHCLIENT_PATH=dhclient

# Check if iproute2 is available...
which ip >/dev/null 2>&1
if [ $? -ne 0 ]; then
    echoerr "error: iproute2 tools not available"
    exit 127
fi

start_network ()
{
    echodbg "bringing up WWAN interface '$DEVICE'"
    ip link set $DEVICE up >/dev/null 2>&1
    IFUP_STATUS=$?
    if [ $IFUP_STATUS -ne 0 ]; then
       echoerr "error: couldn't bring up WWAN interface $DEVICE: UP command returned $IFUP_STATUS"
       stop_network 2
    fi

    if [ -f $RESOLV_CONF_BACKUP ]; then
        rm -f $RESOLV_CONF_BACKUP
    fi

    echodbg "backing up resolv.conf file"
    cp /etc/resolv.conf $RESOLV_CONF_BACKUP

    DHCLIENT_CMD="$DHCLIENT_PATH -pf $PID_FILE -lf $LEASES_FILE $DEVICE"
    echodbg "requesting DHCP in WWAN interface '$DEVICE': $DHCLIENT_CMD"
    eval `$DHCLIENT_CMD` >/dev/null 2>&1
    DHCLIENT_STATUS=$?
    if [ $DHCLIENT_STATUS -ne 0 ]; then
        echoerr "error: couldn't request DHCP in WWAN interface '$DEVICE': dhclient returned $DHCLIENT_STATUS"
        stop_network 3
    fi

    echodbg "validating IP address in WWAN interface '$DEVICE'..."
    IPCHECK_RESULT=`ip addr show dev $DEVICE | grep inet | grep -v inet6 | wc -l`
    if [ -z "$IPCHECK_RESULT" ] || [ "$IPCHECK_RESULT" -lt 1 ]; then
        echoerr "error: IP address not set in WWAN interface '$DEVICE'"
        stop_network 4
    fi

    echodbg "WWAN interface '$DEVICE' started successfully"
    exit 0
}

stop_network ()
{
    ERR=$1

    if [ $ERR -ne 0 ]; then
        echodbg "Bringing down WWAN interface '$DEVICE' after failed connection attempt..."
    fi

    # Don't kill dhclient if PID file not around
    if [ -f $PID_FILE ]; then
        DHCLIENT_CMD="$DHCLIENT_PATH -x -pf $PID_FILE -lf $LEASES_FILE $DEVICE"
        echodbg "releasing DHCP in WWAN interface '$DEVICE': $DHCLIENT_CMD"
        eval `$DHCLIENT_CMD` >/dev/null 2>&1
        DHCLIENT_STATUS=$?
        if [ $DHCLIENT_STATUS -ne 0 ]; then
           echoerr "error: couldn't release DHCP in WWAN interface '$DEVICE': dhclient returned $DHCLIENT_STATUS"
           ERR=5
        fi
    fi

    # Don't bring down interface if not available
    if [ `grep $DEVICE /proc/net/dev | wc -l` -ne 0 ]; then
        echodbg "bringing down WWAN interface '$DEVICE'"
        ip link set $DEVICE down >/dev/null 2>&1
        IFDOWN_STATUS=$?
        if [ $IFDOWN_STATUS -ne 0 ]; then
           echoerr "error: couldn't bring down WWAN interface $DEVICE: DOWN command returned $IFDOWN_STATUS"
           ERR=6
        fi
    fi

    if [ $ERR -eq 0 ]; then
        echodbg "WWAN interface '$DEVICE' stopped successfully"
        if [ -f $RESOLV_CONF_BACKUP ]; then
            echodbg "restoring resolv.conf file"
            cat $RESOLV_CONF_BACKUP > /etc/resolv.conf
            rm $RESOLV_CONF_BACKUP
        fi
    fi

    exit $ERR
}

# Process commands
case $COMMAND in
    "start")
        start_network
        ;;
    "stop")
        stop_network 0
        ;;
    *)
        echoerr "error: unexpected command '$COMMAND'" 1>&2
        print_usage
        exit 1
        ;;
esac

# Never reached
exit 100
