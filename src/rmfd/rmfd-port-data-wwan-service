#!/bin/sh

# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, version 3.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, write to the Free Software Foundation, Inc., 51
# Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Copyright (C) 2013 Zodiac Inflight Innovations
#
# Author: Aleksander Morgado <aleksander@lanedo.com>
#

PROGRAM=$0

echoerr() { echo "[$PROGRAM] $@" 1>&2; }
echodbg() { echo "[$PROGRAM] $@"; }

print_usage ()
{
    echodbg "usage: $0 [DEVICE] [COMMAND]"
}

if [ $# -ne 2 ]; then
    echoerr "error: missing arguments" 1>&2
    print_usage
    exit 1
fi

DEVICE=$1
COMMAND=$2
PID_FILE=/var/run/rmfd-port-data-wwan-service-$DEVICE.pid
LEASES_FILE=/var/run/rmfd-port-data-wwan-service-$DEVICE.leases
RESOLV_CONF_BACKUP=/var/run/rmfd-port-data-wwan-service-$DEVICE.resolv.conf.backup
DHCLIENT_PATH=dhclient

# Check if ifconfig or iproute2 is available...
IFUP_CMD=""
IFDOWN_CMD=""
IPCHECK_CMD=""

which ifconfig >/dev/null 2>&1
if [ $? -eq 0 ]; then
    IFUP_CMD="ifconfig $DEVICE up"
    IFDOWN_CMD="ifconfig $DEVICE down"
    IPCHECK_CMD="ifconfig $DEVICE | grep inet | grep -v inet6 | wc -l"
else
    which ip >/dev/null 2>&1
    if [ $? -eq 0 ]; then
        IFUP_CMD="ip link set $DEVICE up"
        IFDOWN_CMD="ip link set $DEVICE down"
        IPCHECK_CMD="ip addr show dev $DEVICE | grep inet | grep -v inet6 | wc -l"
    fi
fi
if [ -z "$IFUP_CMD" ] || [ -z "$IFDOWN_CMD" ] || [ -z "$IPCHECK_CMD" ]; then
    echoerr "error: neither ifconfig nor iproute2 tools are available"
fi

start_network ()
{
    echodbg "bringing up WWAN interface '$DEVICE': $IFUP_CMD"
    eval `$IFUP_CMD` >/dev/null 2>&1
    IFUP_STATUS=$?
    if [ $IFUP_STATUS -ne 0 ]; then
       echoerr "error: couldn't bring up WWAN interface $DEVICE: UP command returned $IFUP_STATUS"
       exit 2
    fi

    if [ -f $RESOLV_CONF_BACKUP ]; then
        rm -f $RESOLV_CONF_BACKUP
    fi

    echodbg "backing up resolv.conf file"
    cp /etc/resolv.conf $RESOLV_CONF_BACKUP

    DHCLIENT_CMD="$DHCLIENT_PATH -pf $PID_FILE -lf $LEASES_FILE $DEVICE"
    echodbg "requesting DHCP in WWAN interface '$DEVICE': $DHCLIENT_CMD"
    eval `$DHCLIENT_CMD` >/dev/null 2>&1
    DHCLIENT_STATUS=$?
    if [ $DHCLIENT_STATUS -ne 0 ]; then
       echoerr "error: couldn't request DHCP in WWAN interface '$DEVICE': dhclient returned $DHCLIENT_STATUS"
       eval `$IFDOWN_CMD` >/dev/null 2>&1
       exit 3
    fi

    echodbg "validating IP address in WWAN interface '$DEVICE'..."
    IPCHECK_RESULT=`eval $IPCHECK_CMD`
    if [ -z "$IPCHECK_RESULT" ] || [ "$IPCHECK_RESULT" -lt 1 ]; then
       echoerr "error: IP address not set in WWAN interface '$DEVICE'"
       eval `$IFDOWN_CMD` >/dev/null 2>&1
       exit 4
    fi

    echodbg "WWAN interface '$DEVICE' started successfully"
    exit 0
}

stop_network ()
{
    ERR=0

    DHCLIENT_CMD="$DHCLIENT_PATH -x -pf $PID_FILE -lf $LEASES_FILE $DEVICE"
    echodbg "releasing DHCP in WWAN interface '$DEVICE': $DHCLIENT_CMD"
    eval `$DHCLIENT_CMD` >/dev/null 2>&1
    DHCLIENT_STATUS=$?
    if [ $DHCLIENT_STATUS -ne 0 ]; then
       echoerr "error: couldn't release DHCP in WWAN interface '$DEVICE': dhclient returned $DHCLIENT_STATUS"
       ERR=5
    fi

    echodbg "bringing down WWAN interface '$DEVICE': $IFDOWN_CMD"
    eval `$IFDOWN_CMD` >/dev/null 2>&1
    IFDOWN_STATUS=$?
    if [ $IFDOWN_STATUS -ne 0 ]; then
       echoerr "error: couldn't bring down WWAN interface $DEVICE: DOWN command returned $IFDOWN_STATUS"
       ERR=6
    fi

    if [ $ERR -eq 0 ]; then
        echodbg "WWAN interface '$DEVICE' stopped successfully"
        if [ -f $RESOLV_CONF_BACKUP ]; then
            echodbg "restoring resolv.conf file"
            cat $RESOLV_CONF_BACKUP > /etc/resolv.conf
            rm $RESOLV_CONF_BACKUP
        fi
    fi
    exit $ERR
}

# Process commands
case $COMMAND in
    "start")
        start_network
        ;;
    "stop")
        stop_network
        ;;
    *)
        echoerr "error: unexpected command '$COMMAND'" 1>&2
        print_usage
        exit 1
        ;;
esac

# Never reached
exit 100
