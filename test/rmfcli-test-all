#!/bin/bash

# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, version 3.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, write to the Free Software Foundation, Inc., 51
# Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Copyright (C) 2013 Safran Passenger Innovations
#
# Author: Aleksander Morgado <aleksander@aleksander.es>
#

PROGRAM=$0

echoerr() { echo "[$PROGRAM] $@" 1>&2; }

print_usage ()
{
    echo "usage: $0 \"PIN\" \"APN [username [password]]\""
    echo "additionally recognized envvars:"
    echo "    RMF_WITH_VALGRIND=yes   : runs all commands with valgrind"
    echo "    RMF_TARGET_ADDRESS=[IP] : rmfd running in remote IP address"
    echo "    RMF_TARGET_PORT=[PORT]  : rmfd running in remote TCP port"
    echo ""
}

if [ $# -lt 2 ]; then
    echoerr "error: missing arguments" 1>&2
    print_usage
    exit 255
fi

PIN=$1
APN=$2
USER=$3
PASS=$4

EXTRA_ARGS=""
if [ -n "${RMF_TARGET_ADDRESS}" ]; then
    EXTRA_ARGS+=" --target-address=${RMF_TARGET_ADDRESS}"
fi
if [ -n "${RMF_TARGET_PORT}" ]; then
    EXTRA_ARGS+=" --target-port=${RMF_TARGET_PORT}"
fi

VALGRIND_FILE_INDEX=0

run_rmfcli ()
{
    echo ======================================
    if [ "$RMF_WITH_VALGRIND" = "yes" ]; then
        COMMAND="valgrind --leak-check=full --log-file=valgrind-${VALGRIND_FILE_INDEX}.out rmfcli ${EXTRA_ARGS} $@"
        VALGRIND_FILE_INDEX=$(expr $VALGRIND_FILE_INDEX + 1)
    else
        COMMAND="rmfcli ${EXTRA_ARGS} $@"
    fi

    echo $COMMAND
    eval $COMMAND
    if [ $? -ne 0 ]; then
       echoerr "Command failed, aborting"
       exit -1
    fi
}

run_rmfcli --is-available
run_rmfcli --get-manufacturer
run_rmfcli --get-model
run_rmfcli --get-software-revision
run_rmfcli --get-hardware-revision
run_rmfcli --get-imei
run_rmfcli --get-iccid
run_rmfcli --is-locked
run_rmfcli --unlock=$PIN
run_rmfcli --is-locked
# IMSI readable only after PIN unlocked
run_rmfcli --get-imsi
run_rmfcli --get-sim-info
run_rmfcli --disable-pin=$PIN
run_rmfcli --enable-pin=$PIN
run_rmfcli --change-pin=\"$PIN 0000\"
run_rmfcli --change-pin=\"0000 $PIN\"
run_rmfcli --get-signal-info
run_rmfcli --get-registration-status
run_rmfcli --get-connection-status
run_rmfcli --connect=\"$APN\"
run_rmfcli --get-data-port
# Wait some time after connecting
sleep 5
run_rmfcli --get-connection-status
run_rmfcli --get-power-info
run_rmfcli --get-connection-stats
run_rmfcli --disconnect
# Test power status commands only at the very end, so that powering off the
# radio isn't done just before the connection attempt
run_rmfcli --get-power-status
run_rmfcli --set-power-status=Low
run_rmfcli --set-power-status=Full
# Last test, requesting modem reboot
run_rmfcli --power-cycle
exit 0
